<template>
  <view class="uni-px-10" hover-class="none" hover-stop-propagation="false">
    <view class="title justify-content-center align-item-center" hover-class="none" hover-stop-propagation="false">
      <text>BLOG1997</text>
    </view>
    <uni-forms ref="form" :modelValue="formData" :rules="rules" validate-trigger="blur">
      <uni-forms-item label="" name="email">
        <uni-easyinput v-model="formData.email" type="text" placeholder="邮箱" />
      </uni-forms-item>
      <uni-forms-item label="" name="password">
        <uni-easyinput v-model="formData.password" type="password" placeholder="密码" />
      </uni-forms-item>
      <view class="flex-direction-row uni-mb-10">
        <image class="captcha" v-if="captchaData.img" :src="captchaData.img" @click="handleChangecaptcha" mode="widthFix" lazy-load="false"></image>
      </view>
      <uni-forms-item name="captcha">
        <uni-easyinput v-model="formData.captcha" type="text" placeholder="验证码" />
      </uni-forms-item>
      <button type="primary" @click="handleLogin">登 录</button>
    </uni-forms>
  </view>
</template>

<script lang="ts" setup>
import { ref, reactive } from 'vue'
import { useUserStore } from '@/stores/user'
import { getCaptcha, loginByEmail } from '@/api'

const userStore = useUserStore()

const rules = {
  email: {
    rules: [
      { required: true, errorMessage: '请输入邮箱' },
      { format: 'email', errorMessage: '未识别的邮箱' }
    ]
  },
  password: {
    rules: [
      { required: true, errorMessage: '请输入密码' }
    ]
  },
  captcha: {
    rules: [
      { required: true, errorMessage: '请输入验证码' }
    ]
  }
}

const form = ref<{validate:() => Promise<any> }>()
const formData = reactive({ email: '', password: '', captcha: '' })

// 验证码
const captchaData = reactive({ key: '', img: '' })
const handleChangecaptcha = () => {
  getCaptcha().then(res => {
    Object.assign(captchaData, res.data)
  })
}
handleChangecaptcha()

// 登录
const handleLogin = () => {
  if (!form.value) return
  form.value.validate().then(() => {
    loginByEmail({ ...formData, device_name: 'weixinMini', key: captchaData.key })
      .then((res) => {
        userStore.$patch({ ...res.data.data, initialized: true })
        uni.setStorage({
          key: 'app_token',
          data: res.data.data.token
        })
        uni.navigateBack({ delta: 2 })
      })
      .catch(handleChangecaptcha)
  })
}

</script>

<style lang="scss" scoped>
.title {
  height: 320rpx;
}
.captcha{
  height: 65rpx;
  flex: 1;
}
</style>